/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.widgets.sirius;

import Sirius.navigator.ui.DashBoardWidget;

import org.openide.util.lookup.ServiceProvider;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;

import java.util.Calendar;
import java.util.GregorianCalendar;

import de.cismet.cids.custom.widgets.AbstractDashBoardWidget;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
@ServiceProvider(service = DashBoardWidget.class)
public class FakeClock extends AbstractDashBoardWidget {

    //~ Instance fields --------------------------------------------------------

    Image buffer;
    Graphics2D gBuffer;

    Calendar date;

    int nn = 125;
    int r = 100; // Zentrum und Radius

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form FakeClock2.
     */
    public FakeClock() {
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setOpaque(false);

        final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400, Short.MAX_VALUE));
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 300, Short.MAX_VALUE));
    } // </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void init() {
    }

    @Override
    public void refresh() {
    }

    @Override
    public boolean isHeaderWidget() {
        return false;
    }

    @Override
    public int getX() {
        return 1;
    }

    @Override
    public int getY() {
        return 0;
    }

    @Override
    public void dispose() {
    }

    @Override
    public String getTitle() {
        return "Clock";
    }

    /**
     * DOCUMENT ME!
     *
     * @param  g  DOCUMENT ME!
     */
    public void paint(final Graphics2D g) {
        // Double-Buffering
        if (buffer == null) {
            buffer = createImage(this.getSize().width, this.getSize().height);
            gBuffer = (Graphics2D)buffer.getGraphics();
        }
        gBuffer.clearRect(0, 0, this.getSize().width, this.getSize().height);

        // Antialiasing
        gBuffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_ON);

        gBuffer.setColor(new Color(0, 0, 0));
        gBuffer.drawOval(nn - 2, nn - 2, 4, 4);

        // Striche bei 3, 6, 9 und 12 Uhr
        for (int i = 0; i < 4; i++) {
            gBuffer.drawLine(
                nn
                        + (int)((r - 7) * Math.cos(Math.toRadians(90 * i))),
                nn
                        + (int)((r - 7) * Math.sin(Math.toRadians(90 * i))),
                nn
                        + (int)(r * Math.cos(Math.toRadians(90 * i))),
                nn
                        + (int)(r * Math.sin(Math.toRadians(90 * i))));
        }
        // Striche bei jeder Stunde
        for (int i = 0; i < 12; i++) {
            gBuffer.drawLine(
                nn
                        + (int)((r - 5) * Math.cos(Math.toRadians(30 * i))),
                nn
                        + (int)((r - 5) * Math.sin(Math.toRadians(30 * i))),
                nn
                        + (int)(r * Math.cos(Math.toRadians(30 * i))),
                nn
                        + (int)(r * Math.sin(Math.toRadians(30 * i))));
        }
        // Striche bei jeder Minute (optional)
        for (int i = 0; i < 60; i++) {
            gBuffer.drawLine(
                nn
                        + (int)((r - 2) * Math.cos(Math.toRadians(6 * i))),
                nn
                        + (int)((r - 2) * Math.sin(Math.toRadians(6 * i))),
                nn
                        + (int)(r * Math.cos(Math.toRadians(6 * i))),
                nn
                        + (int)(r * Math.sin(Math.toRadians(6 * i))));
        }

        date = new GregorianCalendar();

        final int hours = date.get(Calendar.HOUR_OF_DAY);
        final int minutes = date.get(Calendar.MINUTE);
        final int seconds = date.get(Calendar.SECOND);

        // Stunden
        gBuffer.drawLine(
            nn,
            nn,
            nn
                    + (int)(60 * Math.cos(Math.toRadians((hours % 12 * 30) + (minutes / 2.0) - 90))),
            nn
                    + (int)(60 * Math.sin(Math.toRadians((hours % 12 * 30) + (minutes / 2.0) - 90))));

        // Minuten
        gBuffer.drawLine(
            nn,
            nn,
            nn
                    + (int)(85 * Math.cos(Math.toRadians((minutes * 6) - 90))),
            nn
                    + (int)(85 * Math.sin(Math.toRadians((minutes * 6) - 90))));

        // Sekunden
        gBuffer.setColor(new Color(170, 170, 170));
        gBuffer.drawLine(
            nn,
            nn,
            nn
                    + (int)(90 * Math.cos(Math.toRadians((seconds * 6) - 90))),
            nn
                    + (int)(90 * Math.sin(Math.toRadians((seconds * 6) - 90))));

        g.drawImage(buffer, 0, 0, this);

        // VerzÃ¶gerung
        try {
            Thread.sleep(50);
        } catch (InterruptedException e) {
        }

        repaint();
    }

    @Override
    public void update(final Graphics g) {
        paint(g);
    }
}
