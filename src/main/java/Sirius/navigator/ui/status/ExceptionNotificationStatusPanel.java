/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package Sirius.navigator.ui.status;

import Sirius.navigator.DefaultNavigatorExceptionHandler;
import Sirius.navigator.DefaultNavigatorExceptionHandlerListener;

import org.jdesktop.swingx.JXErrorPane;
import org.jdesktop.swingx.error.ErrorInfo;

import org.openide.util.NbBundle;

import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionAdapter;

import java.util.logging.Level;

import javax.swing.JFrame;
import javax.swing.Timer;

import de.cismet.tools.gui.StaticSwingTools;

/**
 * DOCUMENT ME!
 *
 * @author   Gilles Baatz
 * @version  $Revision$, $Date$
 */
public class ExceptionNotificationStatusPanel extends javax.swing.JPanel
        implements DefaultNavigatorExceptionHandlerListener {

    //~ Instance fields --------------------------------------------------------

    private Throwable uncaughtException;
    private final Timer flashTimer;
    private final Timer steadyTimer;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXHyperlink hlErrorIcon;
    private javax.swing.JPanel pnlDisabled;
    private javax.swing.JPanel pnlIcon;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form ExceptionNotificationStatusPanel.
     */
    public ExceptionNotificationStatusPanel() {
        initComponents();
        DefaultNavigatorExceptionHandler.getInstance().addListener(this);

        flashTimer = new Timer(500, new FlashHandler());
        flashTimer.setCoalesce(true);
        flashTimer.setRepeats(true);
        flashTimer.setInitialDelay(0);

        steadyTimer = new Timer(30 * 1000, new SteadyHandler());
        steadyTimer.setCoalesce(true);
        steadyTimer.setRepeats(false);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        pnlDisabled = new javax.swing.JPanel();
        pnlIcon = new javax.swing.JPanel();
        hlErrorIcon = new org.jdesktop.swingx.JXHyperlink();

        setLayout(new java.awt.CardLayout());

        pnlDisabled.setLayout(new java.awt.GridLayout());
        add(pnlDisabled, "DISABLED");

        pnlIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pnlIcon.setMaximumSize(new java.awt.Dimension(17, 16));
        pnlIcon.setMinimumSize(new java.awt.Dimension(17, 16));
        pnlIcon.setPreferredSize(new java.awt.Dimension(17, 16));
        pnlIcon.addMouseListener(new java.awt.event.MouseAdapter() {

                @Override
                public void mouseClicked(final java.awt.event.MouseEvent evt) {
                    pnlIconMouseClicked(evt);
                }
            });
        pnlIcon.setLayout(new java.awt.GridLayout());

        hlErrorIcon.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/Sirius/navigator/resource/img/exclamation-red-frame.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(
            hlErrorIcon,
            org.openide.util.NbBundle.getMessage(
                ExceptionNotificationStatusPanel.class,
                "ExceptionNotificationStatusPanel.hlErrorIcon.text"));                                // NOI18N
        hlErrorIcon.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    hlErrorIconActionPerformed(evt);
                }
            });
        pnlIcon.add(hlErrorIcon);

        add(pnlIcon, "ICON");
        pnlIcon.addMouseListener(new MouseAdapter() {
            });
        pnlIcon.addMouseMotionListener(new MouseMotionAdapter() {
            });
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void hlErrorIconActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_hlErrorIconActionPerformed
        showErrorPanel();
    }                                                                               //GEN-LAST:event_hlErrorIconActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void pnlIconMouseClicked(final java.awt.event.MouseEvent evt) { //GEN-FIRST:event_pnlIconMouseClicked
        showErrorPanel();
    }                                                                       //GEN-LAST:event_pnlIconMouseClicked

    /**
     * DOCUMENT ME!
     */
    private void showErrorPanel() {
        final ErrorInfo ei = new ErrorInfo(
                NbBundle.getMessage(
                    ExceptionNotificationStatusPanel.class,
                    "ExceptionNotificationStatusPanel.hlErrorIconActionPerformed().error.title"),
                uncaughtException.getMessage(),
                null,
                null,
                uncaughtException,
                Level.ALL,
                null);
        JXErrorPane.showDialog(StaticSwingTools.getParentFrameIfNotNull(this), ei);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  card  DOCUMENT ME!
     */
    private void showCardPanel(final Boolean card) {
        String cardStr = "DISABLED";
        if (card != null) {
            cardStr = "ICON";
            hlErrorIcon.setVisible(card);
        }
        ((CardLayout)this.getLayout()).show(this, cardStr);
    }

    @Override
    public void uncaughtException(final Thread thread, final Throwable error) {
        anErrorOccurred(thread, error);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  thread  DOCUMENT ME!
     * @param  error   DOCUMENT ME!
     */
    public void anErrorOccurred(final Thread thread, final Throwable error) {
        uncaughtException = error;
        flashTimer.restart();
    }

    /**
     * DOCUMENT ME!
     *
     * @param  args  DOCUMENT ME!
     */
    public static void main(final String[] args) {
        final JFrame frame = new JFrame();
        frame.setSize(50, 50);
        final ExceptionNotificationStatusPanel panel = new ExceptionNotificationStatusPanel();
        frame.add(panel);
        frame.setVisible(true);
        panel.anErrorOccurred(null, new NullPointerException());
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    public class FlashHandler implements ActionListener {

        //~ Instance fields ----------------------------------------------------

        private int counter;

        //~ Methods ------------------------------------------------------------

        @Override
        public void actionPerformed(final ActionEvent ae) {
            showCardPanel((counter % 2) == 0);
            counter++;
            if (counter > 10) {
                counter = 0;
                showCardPanel(true);
                ((Timer)ae.getSource()).stop();
                steadyTimer.restart();
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    public class SteadyHandler implements ActionListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void actionPerformed(final ActionEvent ae) {
            showCardPanel(null);
        }
    }
}
