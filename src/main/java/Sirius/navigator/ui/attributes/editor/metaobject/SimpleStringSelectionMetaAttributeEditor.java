/*
 * SimpleBooleanMetaAttributeEditor.java
 *
 * Created on 29. August 2004, 15:48
 */

package Sirius.navigator.ui.attributes.editor.metaobject;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.event.*;
import java.util.*;

import Sirius.server.localserver.attribute.Attribute;
import Sirius.server.middleware.types.MetaObject;
import Sirius.navigator.ui.attributes.editor.*;

import org.apache.log4j.Logger;

/**
 * 
 *
 * @author  Pascal
 */
public class SimpleStringSelectionMetaAttributeEditor extends AbstractSimpleMetaAttributeEditor
{
    protected Collection selectionValues;
    
    /** Creates new form SimpleBooleanMetaAttributeEditor */
    public SimpleStringSelectionMetaAttributeEditor()
    {
        this.logger = Logger.getLogger(this.getClass());
        this.selectionValues = this.getSelectionValues();
        
        this.editorActivationDelegate = new SimpleEditorActivationDelegate();
        this.editorUIDelegate = new SimpleEditorUIDelegate();
        this.readOnly = false;
        
        this.initComponents();
        
        this.stringComboBox.setModel((new DefaultComboBoxModel((Object[])selectionValues.toArray(new Object[selectionValues.size()]))));
    }
    
    protected Collection getSelectionValues()
    {
         HashSet selectionValues = new HashSet();
         
         selectionValues.add("Wert 1");
         selectionValues.add("Wert 2");
         selectionValues.add("Wert 3");
         
         return selectionValues;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        stringComboBox = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        stringComboBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                stringComboBoxItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(stringComboBox, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents

    private void stringComboBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_stringComboBoxItemStateChanged
    {//GEN-HEADEREND:event_stringComboBoxItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED)
        {
            if(logger.isDebugEnabled())logger.debug("stringComboBoxItemStateChanged() item selected: " + evt.getItem());
            this.setValueChanged(true);
            this.stopEditing();
        }
    }//GEN-LAST:event_stringComboBoxItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox stringComboBox;
    // End of variables declaration//GEN-END:variables
    
    protected void initUI()
    {
         this.stringComboBox.setEnabled(this.isEditable(null));
    }
    
    public boolean isEditable(java.util.EventObject anEvent)
    {
        return true;
    }
    
    protected Object getComponentValue()
    {
        return this.stringComboBox.getSelectedItem();
    }
    
    // value ist immer ein Attribut!!!
    protected void setComponentValue(Object value)
    { 
        if(logger.isDebugEnabled())logger.debug("setComponentValue(): setting string value: '" + value + "'");
        if(value != null && this.getAttributeValue(value) != null)
        {
            if(this.selectionValues.contains(this.getAttributeValue(value)))
            {
                if(logger.isDebugEnabled())logger.debug("setComponentValue(): this.stringComboBox.setSelectedItem(value): '" + value + "'");
                this.stringComboBox.setSelectedItem(value.toString());
            }
            else
            {
                logger.warn("setComponentValue(): new value (" + value + ") is not in the list of allowed selection values");
                this.stringComboBox.setSelectedIndex(0);
                
                /*logger.debug(value.getClass());
                Iterator iterator = this.selectionValues.iterator();
                while(iterator.hasNext())
                {
                    logger.debug(iterator.next());
                }*/
            }
        }
        else
        {
            // standardm\u00E4\u00DFig auf 0 setzen
            this.stringComboBox.setSelectedIndex(0);
            if(logger.isDebugEnabled())logger.debug("setComponentValue(): value is null, setting index 0 to: " + this.stringComboBox.getSelectedItem());
            this.setValue(this.getComponentValue());
            this.setValueChanged(true);
        } 
    }
    
    protected Sirius.navigator.ui.attributes.editor.metaobject.AbstractSimpleMetaAttributeEditor.ValueChangeListener getValueChangeListener()
    {
        return null;
    }  
}
