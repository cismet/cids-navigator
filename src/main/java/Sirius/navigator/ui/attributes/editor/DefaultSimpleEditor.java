/*
 * DefaultSimpleEditor.java
 *
 * Created on 19. August 2004, 15:28
 */

package Sirius.navigator.ui.attributes.editor;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.event.*;

import org.apache.log4j.Logger;

/**
 * Standardimplementierung eines einfachen Editors (JTextField).
 *
 * @author  Pascal
 */
public class DefaultSimpleEditor extends AbstractSimpleEditor //javax.swing.JPanel
{
    
    /** Creates new form DefaultSimpleEditor */
    public DefaultSimpleEditor()
    {
        this.logger = Logger.getLogger(this.getClass());
        
        this.editorActivationDelegate = new SimpleEditorActivationDelegate();
        this.editorUIDelegate = new SimpleEditorUIDelegate();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        simpleValueField = new javax.swing.JTextField();
        complexEditorButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        simpleValueField.setColumns(12);
        simpleValueField.setDragEnabled(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(simpleValueField, gridBagConstraints);

        complexEditorButton.setText("...");
        complexEditorButton.setActionCommand(AbstractSimpleEditor.SimpleEditorActivationDelegate.SHOW_UI_COMMAND);
        complexEditorButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        complexEditorButton.setMaximumSize(new java.awt.Dimension(0, 0));
        complexEditorButton.setMinimumSize(new java.awt.Dimension(15, 20));
        complexEditorButton.setPreferredSize(new java.awt.Dimension(15, 20));
        complexEditorButton.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(complexEditorButton, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents
    
    /**
     * Der [...]-Button interessiert uns nur, wenn ein komplexer child editor verf\u00FCgbar ist ...
     */
    public Component getEditorComponent(BasicContainer parentContainer, ComplexEditor complexChildEditor, Object id, Object value)
    {
        Component editorComponent = super.getEditorComponent(parentContainer, complexChildEditor, id, value);
        
        if(this.complexEditorButton != null)
        {
            this.complexEditorButton.setEnabled(complexChildEditor != null);
        }
        
        return editorComponent;
    }
    
    protected void initUI()
    {
        if(!this.init)
        {
            this.initComponents();
            
            // Beim Dr\u00FCcken auf den [...]-Button sollte sich der komplexe Editor \u00F6ffnen
            // (oder auch nicht ...);
            this.complexEditorButton.addActionListener(this.editorActivationDelegate);
            
            ValueChangeListener valueChangeListener = new ValueChangeListener();
            this.simpleValueField.addFocusListener(valueChangeListener);
            this.simpleValueField.addActionListener(valueChangeListener);
            //this.simpleValueField.getDocument().addDocumentListener(valueChangeListener);
            
            this.complexEditorButton.setPreferredSize(new Dimension(this.simpleValueField.getPreferredSize().height, this.complexEditorButton.getPreferredSize().width));
            
            this.init = true;
        }
        else if(logger.isDebugEnabled())
        {
            logger.debug("initUI(" + this.getId() + "): ui already initialized");
        }
        
        this.simpleValueField.setEditable(!this.readOnly);
        this.simpleValueField.setEnabled(!this.readOnly);
        this.setValueChanged(false);
    }
    
    /**
     * Editierbar, wenn das Feld oder Button enabled sind.
     */
    public boolean isEditable(java.util.EventObject anEvent)
    {
        return this.simpleValueField.isEnabled() | (this.complexEditorButton != null && this.complexEditorButton.isEnabled());
    }
    
    protected Object getComponentValue()
    {
        
        /*if(this.getValue() != null)
        {
            this.valueChanged |= this.getValue().equals(this.simpleValueField.getText());
        }
        else
        {
            this.valueChanged = true;
        }*/
        
        return this.simpleValueField.getText();
    }
    
    protected void setComponentValue(Object value)
    {
        if(value != null)
        {
            this.simpleValueField.setText(value.toString());
        }
        else
        {
            this.simpleValueField.setText(null);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton complexEditorButton;
    protected javax.swing.JTextField simpleValueField;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Speichert den Wert des Editors, wenn das Textfeld den Focus verliert oder 
     * ENTER gedr\u00FCckt wird.
     */
    protected class ValueChangeListener implements FocusListener, ActionListener
    {  
        private String oldValue = null;
        
        public void focusGained(FocusEvent e)
        {
            if(!e.isTemporary())
            {
                this.oldValue = DefaultSimpleEditor.this.simpleValueField.getText();
            }
        }
        
        public void focusLost(FocusEvent e)
        {
            if(!e.isTemporary())
            {
                this.actionPerformed();
            }
        }
        
        public void actionPerformed(ActionEvent e)
        {
            this.actionPerformed();
        }
        
        protected void actionPerformed()
        {
            DefaultSimpleEditor.this.setValueChanged (DefaultSimpleEditor.this.isValueChanged() | this.isChanged());
            if(DefaultSimpleEditor.this.isValueChanged())
            {
                DefaultSimpleEditor.this.stopEditing();
            }
        }
        
        protected boolean isChanged()
        {
            if(this.oldValue != null)
            {
                return !this.oldValue.equals(DefaultSimpleEditor.this.simpleValueField.getText());
            }
            else
            {
                return true;
            }
        }
    }
}
