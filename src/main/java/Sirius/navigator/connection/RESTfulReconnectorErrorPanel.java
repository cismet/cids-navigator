/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 *  Copyright (C) 2010 jruiz
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * RESTfulReconnectorErrorPanel.java
 *
 * Created on 25.08.2010, 12:55:35
 */
package Sirius.navigator.connection;

import java.awt.BorderLayout;
import java.awt.Container;

import javax.swing.JDialog;

import de.cismet.lookupoptions.options.ProxyOptionsPanel;

import de.cismet.netutil.Proxy;

import de.cismet.reconnector.DefaultReconnectorErrorPanel;
import de.cismet.reconnector.ReconnectorErrorPanelWithApply;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class RESTfulReconnectorErrorPanel extends javax.swing.JPanel implements ReconnectorErrorPanelWithApply {

    //~ Static fields/initializers ---------------------------------------------

    private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(RESTfulReconnector.class);

    //~ Instance fields --------------------------------------------------------

    private final ProxyOptionsPanel panProxyOptions;
    private final RESTfulReconnector reconnector;
    private DefaultReconnectorErrorPanel errPan;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel errPanWrapper;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel panProxyOptionsWrapper;
    private javax.swing.JToggleButton tbProxy;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form RESTfulReconnectorErrorPanel.
     *
     * @param  panProxyOptions  DOCUMENT ME!
     * @param  reconnector      DOCUMENT ME!
     */
    public RESTfulReconnectorErrorPanel(final ProxyOptionsPanel panProxyOptions, final RESTfulReconnector reconnector) {
        initComponents();
        this.reconnector = reconnector;
        this.panProxyOptions = panProxyOptions;
        panProxyOptionsWrapper.add(panProxyOptions, BorderLayout.CENTER);
        panProxyOptionsWrapper.setVisible(false);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @param  message    DOCUMENT ME!
     * @param  exception  DOCUMENT ME!
     */
    public void setError(final String message, final Throwable exception) {
        errPan = new DefaultReconnectorErrorPanel(message, exception);
        errPanWrapper.removeAll();
        errPanWrapper.add(errPan);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panProxyOptionsWrapper = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        errPanWrapper = new javax.swing.JPanel();
        tbProxy = new javax.swing.JToggleButton();

        setLayout(new java.awt.GridBagLayout());

        panProxyOptionsWrapper.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(panProxyOptionsWrapper, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        add(jSeparator1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        add(jSeparator2, gridBagConstraints);

        errPanWrapper.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(errPanWrapper, gridBagConstraints);

        tbProxy.setText(org.openide.util.NbBundle.getMessage(
                RESTfulReconnectorErrorPanel.class,
                "RESTfulReconnectorErrorPanel.tbProxy.text")); // NOI18N
        tbProxy.setPreferredSize(new java.awt.Dimension(140, 30));
        tbProxy.setRolloverEnabled(false);
        tbProxy.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    tbProxyActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(tbProxy, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    @Override
    public void apply() {
        final Proxy proxy = panProxyOptions.getProxy();
        reconnector.setProxy(proxy);

        if (proxy == null) {
            LOG.warn("proxy configuration not saved to preferences, proxy is null");
        } else {
            proxy.toPreferences();
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void tbProxyActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_tbProxyActionPerformed
        panProxyOptionsWrapper.setVisible(tbProxy.isSelected());

        // hochpendeln bis JDialog
        Container parent = this;
        do {
            parent = parent.getParent();
        } while ((parent != null) && !(parent instanceof JDialog));
        if (parent != null) {
            ((JDialog)parent).pack();
        }
    } //GEN-LAST:event_tbProxyActionPerformed
}
